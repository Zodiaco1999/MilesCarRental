// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MilesCarRental.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MilesCarRental.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251021161829_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MilesCarRental.Domain.Alquileres.Alquiler", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("FechaCancelacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_cancelacion");

                    b.Property<DateTime?>("FechaCompletado")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_completado");

                    b.Property<DateTime?>("FechaConfirmacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_confirmacion");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime?>("FechaDenegacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_denegacion");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehiculo_id");

                    b.HasKey("Id")
                        .HasName("pk_alquileres");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_alquileres_user_id");

                    b.HasIndex("VehiculoId")
                        .HasDatabaseName("ix_alquileres_vehiculo_id");

                    b.ToTable("alquileres", (string)null);
                });

            modelBuilder.Entity("MilesCarRental.Domain.Localidades.Localidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_localidades");

                    b.ToTable("localidades", (string)null);
                });

            modelBuilder.Entity("MilesCarRental.Domain.Mercados.LocalidadMercado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("LocalidadId")
                        .HasColumnType("uuid")
                        .HasColumnName("localidad_id");

                    b.Property<Guid>("MercadoId")
                        .HasColumnType("uuid")
                        .HasColumnName("mercado_id");

                    b.HasKey("Id")
                        .HasName("pk_localidad_mercado");

                    b.HasIndex("LocalidadId")
                        .HasDatabaseName("ix_localidad_mercado_localidad_id");

                    b.HasIndex("MercadoId")
                        .HasDatabaseName("ix_localidad_mercado_mercado_id");

                    b.ToTable("localidad_mercado", (string)null);
                });

            modelBuilder.Entity("MilesCarRental.Domain.Mercados.Mercado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_mercados");

                    b.ToTable("mercados", (string)null);
                });

            modelBuilder.Entity("MilesCarRental.Domain.Mercados.VehiculoMercado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("MercadoId")
                        .HasColumnType("uuid")
                        .HasColumnName("mercado_id");

                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehiculo_id");

                    b.HasKey("Id")
                        .HasName("pk_vehiculo_mercado");

                    b.HasIndex("MercadoId")
                        .HasDatabaseName("ix_vehiculo_mercado_mercado_id");

                    b.HasIndex("VehiculoId")
                        .HasDatabaseName("ix_vehiculo_mercado_vehiculo_id");

                    b.ToTable("vehiculo_mercado", (string)null);
                });

            modelBuilder.Entity("MilesCarRental.Domain.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlquilerId")
                        .HasColumnType("uuid")
                        .HasColumnName("alquiler_id");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("comentario");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehiculo_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("AlquilerId")
                        .HasDatabaseName("ix_reviews_alquiler_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.HasIndex("VehiculoId")
                        .HasDatabaseName("ix_reviews_vehiculo_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("MilesCarRental.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Apellido")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("apellido");

                    b.Property<string>("Email")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("email");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MilesCarRental.Domain.Vehiculos.DisponibilidadVehiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Disponible")
                        .HasColumnType("boolean")
                        .HasColumnName("disponible");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_fin");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_inicio");

                    b.Property<Guid>("LocalidadDevolucionId")
                        .HasColumnType("uuid")
                        .HasColumnName("localidad_devolucion_id");

                    b.Property<Guid>("LocalidadRecogidaId")
                        .HasColumnType("uuid")
                        .HasColumnName("localidad_recogida_id");

                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehiculo_id");

                    b.HasKey("Id")
                        .HasName("pk_disponibilidad_vehiculo");

                    b.HasIndex("LocalidadDevolucionId")
                        .HasDatabaseName("ix_disponibilidad_vehiculo_localidad_devolucion_id");

                    b.HasIndex("LocalidadRecogidaId")
                        .HasDatabaseName("ix_disponibilidad_vehiculo_localidad_recogida_id");

                    b.HasIndex("VehiculoId")
                        .HasDatabaseName("ix_disponibilidad_vehiculo_vehiculo_id");

                    b.ToTable("disponibilidad_vehiculo", (string)null);
                });

            modelBuilder.Entity("MilesCarRental.Domain.Vehiculos.Vehiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int[]>("Accesorios")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("accesorios");

                    b.Property<DateTime?>("FechaUltimaAlquiler")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_ultima_alquiler");

                    b.Property<Guid>("LocalidadId")
                        .HasColumnType("uuid")
                        .HasColumnName("localidad_id");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("modelo");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("vin");

                    b.HasKey("Id")
                        .HasName("pk_vehiculos");

                    b.HasIndex("LocalidadId")
                        .HasDatabaseName("ix_vehiculos_localidad_id");

                    b.ToTable("vehiculos", (string)null);
                });

            modelBuilder.Entity("MilesCarRental.Domain.Alquileres.Alquiler", b =>
                {
                    b.HasOne("MilesCarRental.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alquileres_user_user_id");

                    b.HasOne("MilesCarRental.Domain.Vehiculos.Vehiculo", null)
                        .WithMany()
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alquileres_vehiculo_vehiculo_id");

                    b.OwnsOne("MilesCarRental.Domain.Shared.Moneda", "Accesorios", b1 =>
                        {
                            b1.Property<Guid>("AlquilerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Monto")
                                .HasColumnType("numeric")
                                .HasColumnName("accesorios_monto");

                            b1.Property<string>("TipoMoneda")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("accesorios_tipo_moneda");

                            b1.HasKey("AlquilerId");

                            b1.ToTable("alquileres");

                            b1.WithOwner()
                                .HasForeignKey("AlquilerId")
                                .HasConstraintName("fk_alquileres_alquileres_id");
                        });

                    b.OwnsOne("MilesCarRental.Domain.Shared.Moneda", "Mantenimiento", b1 =>
                        {
                            b1.Property<Guid>("AlquilerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Monto")
                                .HasColumnType("numeric")
                                .HasColumnName("mantenimiento_monto");

                            b1.Property<string>("TipoMoneda")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("mantenimiento_tipo_moneda");

                            b1.HasKey("AlquilerId");

                            b1.ToTable("alquileres");

                            b1.WithOwner()
                                .HasForeignKey("AlquilerId")
                                .HasConstraintName("fk_alquileres_alquileres_id");
                        });

                    b.OwnsOne("MilesCarRental.Domain.Shared.Moneda", "PrecioPorPeriodo", b1 =>
                        {
                            b1.Property<Guid>("AlquilerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Monto")
                                .HasColumnType("numeric")
                                .HasColumnName("precio_por_periodo_monto");

                            b1.Property<string>("TipoMoneda")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("precio_por_periodo_tipo_moneda");

                            b1.HasKey("AlquilerId");

                            b1.ToTable("alquileres");

                            b1.WithOwner()
                                .HasForeignKey("AlquilerId")
                                .HasConstraintName("fk_alquileres_alquileres_id");
                        });

                    b.OwnsOne("MilesCarRental.Domain.Shared.Moneda", "PrecioTotal", b1 =>
                        {
                            b1.Property<Guid>("AlquilerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Monto")
                                .HasColumnType("numeric")
                                .HasColumnName("precio_total_monto");

                            b1.Property<string>("TipoMoneda")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("precio_total_tipo_moneda");

                            b1.HasKey("AlquilerId");

                            b1.ToTable("alquileres");

                            b1.WithOwner()
                                .HasForeignKey("AlquilerId")
                                .HasConstraintName("fk_alquileres_alquileres_id");
                        });

                    b.OwnsOne("MilesCarRental.Domain.Alquileres.DateRange", "Duracion", b1 =>
                        {
                            b1.Property<Guid>("AlquilerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("Fin")
                                .HasColumnType("date")
                                .HasColumnName("duracion_fin");

                            b1.Property<DateOnly>("Inicio")
                                .HasColumnType("date")
                                .HasColumnName("duracion_inicio");

                            b1.HasKey("AlquilerId");

                            b1.ToTable("alquileres");

                            b1.WithOwner()
                                .HasForeignKey("AlquilerId")
                                .HasConstraintName("fk_alquileres_alquileres_id");
                        });

                    b.Navigation("Accesorios");

                    b.Navigation("Duracion");

                    b.Navigation("Mantenimiento");

                    b.Navigation("PrecioPorPeriodo");

                    b.Navigation("PrecioTotal");
                });

            modelBuilder.Entity("MilesCarRental.Domain.Localidades.Localidad", b =>
                {
                    b.OwnsOne("MilesCarRental.Domain.Vehiculos.Direccion", "Direccion", b1 =>
                        {
                            b1.Property<Guid>("LocalidadId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("calle");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("ciudad");

                            b1.Property<string>("Departamento")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("departamento");

                            b1.Property<string>("Pais")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("pais");

                            b1.Property<string>("Provincia")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("provincia");

                            b1.HasKey("LocalidadId");

                            b1.ToTable("localidades");

                            b1.WithOwner()
                                .HasForeignKey("LocalidadId")
                                .HasConstraintName("fk_localidades_localidades_id");
                        });

                    b.Navigation("Direccion")
                        .IsRequired();
                });

            modelBuilder.Entity("MilesCarRental.Domain.Mercados.LocalidadMercado", b =>
                {
                    b.HasOne("MilesCarRental.Domain.Localidades.Localidad", null)
                        .WithMany()
                        .HasForeignKey("LocalidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_localidad_mercado_localidades_localidad_id");

                    b.HasOne("MilesCarRental.Domain.Mercados.Mercado", null)
                        .WithMany()
                        .HasForeignKey("MercadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_localidad_mercado_mercado_mercado_id");
                });

            modelBuilder.Entity("MilesCarRental.Domain.Mercados.VehiculoMercado", b =>
                {
                    b.HasOne("MilesCarRental.Domain.Mercados.Mercado", null)
                        .WithMany()
                        .HasForeignKey("MercadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vehiculo_mercado_mercados_mercado_id");

                    b.HasOne("MilesCarRental.Domain.Vehiculos.Vehiculo", null)
                        .WithMany()
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vehiculo_mercado_vehiculos_vehiculo_id");
                });

            modelBuilder.Entity("MilesCarRental.Domain.Reviews.Review", b =>
                {
                    b.HasOne("MilesCarRental.Domain.Alquileres.Alquiler", null)
                        .WithMany()
                        .HasForeignKey("AlquilerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_alquileres_alquiler_id");

                    b.HasOne("MilesCarRental.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_user_user_id");

                    b.HasOne("MilesCarRental.Domain.Vehiculos.Vehiculo", null)
                        .WithMany()
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_vehiculo_vehiculo_id");
                });

            modelBuilder.Entity("MilesCarRental.Domain.Vehiculos.DisponibilidadVehiculo", b =>
                {
                    b.HasOne("MilesCarRental.Domain.Localidades.Localidad", null)
                        .WithMany()
                        .HasForeignKey("LocalidadDevolucionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DisponibilidadVehiculo_LocalidadDevolucion");

                    b.HasOne("MilesCarRental.Domain.Localidades.Localidad", null)
                        .WithMany()
                        .HasForeignKey("LocalidadRecogidaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DisponibilidadVehiculo_LocalidadRecogida");

                    b.HasOne("MilesCarRental.Domain.Vehiculos.Vehiculo", null)
                        .WithMany()
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_disponibilidad_vehiculo_vehiculo_vehiculo_id");
                });

            modelBuilder.Entity("MilesCarRental.Domain.Vehiculos.Vehiculo", b =>
                {
                    b.HasOne("MilesCarRental.Domain.Localidades.Localidad", null)
                        .WithMany()
                        .HasForeignKey("LocalidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vehiculos_localidades_localidad_id");

                    b.OwnsOne("MilesCarRental.Domain.Shared.Moneda", "Mantenimiento", b1 =>
                        {
                            b1.Property<Guid>("VehiculoId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Monto")
                                .HasColumnType("numeric")
                                .HasColumnName("mantenimiento_monto");

                            b1.Property<string>("TipoMoneda")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("mantenimiento_tipo_moneda");

                            b1.HasKey("VehiculoId");

                            b1.ToTable("vehiculos");

                            b1.WithOwner()
                                .HasForeignKey("VehiculoId")
                                .HasConstraintName("fk_vehiculos_vehiculos_id");
                        });

                    b.OwnsOne("MilesCarRental.Domain.Shared.Moneda", "Precio", b1 =>
                        {
                            b1.Property<Guid>("VehiculoId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Monto")
                                .HasColumnType("numeric")
                                .HasColumnName("precio_monto");

                            b1.Property<string>("TipoMoneda")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("precio_tipo_moneda");

                            b1.HasKey("VehiculoId");

                            b1.ToTable("vehiculos");

                            b1.WithOwner()
                                .HasForeignKey("VehiculoId")
                                .HasConstraintName("fk_vehiculos_vehiculos_id");
                        });

                    b.Navigation("Mantenimiento")
                        .IsRequired();

                    b.Navigation("Precio")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
